import React, { useEffect, useState } from 'react';
import { Alert, Platform, Pressable, SafeAreaView, StyleSheet, Text } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import * as AuthSession from "expo-auth-session";
import jwtDecode from "jwt-decode";
import { StatusBar } from 'expo-status-bar';

const Stack = createNativeStackNavigator();

// We want to ensure that the browser auth window that is launched when a user goes to sign in only
// appears when they are on mobile. This window is launched for us by the auth.expo.io proxy: 
// https://docs.expo.dev/versions/latest/sdk/auth-session/#what--authexpoio--does-for-you
// We specify this when calling AuthSession's promptAsync, upon the user clicking "Press Me to Authenticate"
const useProxy = Platform.select({ web: false, default: true });

// You need to swap out the Auth0 client id and domain with the one from your Auth0 client.
// In your Auth0 application dashboard, you need to also add a url to your Allowed Callback URLs.
//
// For this application, I added https://auth.expo.io/@danstepanov/auth-session-with-auth0 because I am
// signed in as the 'danstepanov' account on Expo and the name/slug for this app is auth-session-with-auth0.
//
// You can open this app in the Expo client and check your logs to find out your redirect URL.
const auth0ClientId = 'hwB2Qgt8gLaXOz3rMV2RBGI0JnKMtUXQ';
const auth0Domain = 'https://dev-nu2c9oof.us.auth0.com';

// We need to tell Auth0 where to navigate the user after they are done authenticating. We generate this link
// using the auth.expo.io proxy. This only works in Expo Go and standalone environments so we only want useProxy
// to be true if we are on mobile.
// https://docs.expo.dev/versions/latest/sdk/auth-session/#authsessionmakeredirecturioptions
const redirectUri = AuthSession.makeRedirectUri({ useProxy });

export default function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [name, setName] = useState('');

  // AuthSession provides a hook, useAuthRequest, used for opinionated Google authentication that works
  // across platforms. This hook returns three values:
  // - request: An instance of GoogleAuthRequest that can be used to prompt the user for authorization.
  // This will be null until the auth request has finished loading so we'll want to disable our sign in
  // button until this is not null.
  //
  // - result: This is null until promptAsync has been invoked. Once fulfilled it will return information
  // about the authorization.
  // 
  // - promptAsync: When invoked, a web browser will open up and prompt the user for authentication.
  // Accepts an AuthRequestPromptOptions object with options about how the prompt will execute.
  // This should not be used to enable the Expo proxy service auth.expo.io, as the proxy will be
  // automatically enabled based on the platform.
  const [request, response, promptAsync] = AuthSession.useAuthRequest(
    // Specify what provider to use, we want to use Auth0
    // Provide a valid AuthRequestConfig
    // https://docs.expo.dev/versions/latest/sdk/auth-session/#authrequestconfig
    {
      // The redirectUri tells AuthSession where to redirect the user once they try to sign in
      redirectUri,
      // The clientId generated by Auth0 for your application
      clientId: auth0ClientId,
      // Specify what to return from Auth0
      responseType: 'id_token',
      // List of strings to request access to, from Auth0
      scopes: ['openid', 'profile'],
      extraParams: {
        // A string value which will be included in the ID Token response from Auth0, used to prevent 
        // token replay attacks.It is required for response_type = id_token token.
        // https://auth0.com/docs/api/authentication#authorization-code-flow
        nonce: "nonce"
      },
    },
    // List of endpoints used for authenticating, only authorizationEndpoint is necessary
    {
      // Used to interact with Auth0 and obtain an authorization grant. This value is also configured
      // in the Auth0 dashboard for your application, under Allowed Callback URLs.
      // You can open this app in the Expo client and check your logs to find out your redirect URL.
      authorizationEndpoint: auth0Domain + '/authorize'
    }
  );

  // We assume that every time the response changes, the user has attempted to sign in
  useEffect(() => {
    console.log('redirect url: ', redirectUri);
    console.log('response: ', response);
    console.log('authorization endpoint: ', auth0Domain + '/authorize')

    if (response) {
      // The authentication request failed
      if (response.error) {
        Alert.alert('Authentication Error', response.params.error_description || 'something went wrong');
        return;
      }

      // The authentication request succeeded
      if (response.type === 'success') {
        // Retrieve the JWT and decode it, it contains all the user info from Auth0
        const jwt = response.params.id_token;
        const decodedJwt = jwtDecode(jwt);
        console.log('decodedJwt: ', decodedJwt);
        setName(decodedJwt.given_name);
        setIsAuthenticated(true);
      }
    }
  }, [response]);

  const Authentication = () => {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style='dark' /> 
        <Pressable style={styles.button} onPress={() => promptAsync({ useProxy })} disabled={!request}>
              <Text style={styles.text}>Press Me to Authenticate</Text>
          </Pressable>
      </SafeAreaView>
    );
  }

  const Home = ({ route }) => {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style='dark' />
        <Text>{`Welcome to the app${route.params.name && ', ' + route.params.name}!`}</Text>
      </SafeAreaView>
    );
  }
  
  return (
    <NavigationContainer>
      <Stack.Navigator>
        {isAuthenticated ? (
          <Stack.Screen name="Home" component={Home} options={{ headerShown: false }} initialParams={{ name }} />
        ): (
          <Stack.Screen name="Authentication" component={Authentication} options={{ headerShown: false }} />
        )}
      </Stack.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  button: {
    alignItems: 'center',
    backgroundColor: 'blue',
    borderRadius: 5,
    height: 50,
    justifyContent: 'center',
    width: '60%'
  },
  container: {
    alignItems: 'center',
    flex: 1,
    justifyContent: 'center'
  },
  text: {
    color: 'white'
  }
});